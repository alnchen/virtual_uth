{"version":3,"sources":["cards/card.js","playerhand.js","cards/constants.js","dealerhand.js","flop.js","turnAndRiver.js","App.js","cards/deck.js","serviceWorker.js","index.js"],"names":["Card","props","state","this","setState","showFlop","card","suit","value","valueColor","id","alt","src","spade","heart","club","diamond","React","Component","PlayerHand","hand","SUITS","VALUES","DealerHand","showDealerHand","showCards","bind","onClick","Flop","newValue","TurnAndRiver","showTurnAndRiver","App","deck","shuffleDeck","playerCount","gameStarted","playerHands","flop","turnAndRiver","dealerHand","newGame","addPlayerCount","minusPlayerCount","dealCards","reset","forEach","push","shuffle","buildDeck","newDeck","hands","i","cards","shift","className","lockOrientation","orientation","alwaysRender","map","index","length","renderFlop","renderTurnAndRiver","renderDealerHand","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.b40c07b5.chunk.js","sourcesContent":["import React from 'react';\n\nexport default class Card extends React.Component {\n  constructor(props) {\n      super(props);\n\n      this.state = {\n      }\n  }\n\n  componentWillReceiveProps(){\n      this.setState({\n        showFlop: false\n      })\n  }\n\n  showCards() {\n      this.setState({\n        showFlop: true\n      })\n  }\n\n  render() {\n      const SUITICONS = {\n          spade: 'https://res.cloudinary.com/ac31624/image/upload/v1587100949/spade_jw8eag.png',\n          heart: 'https://res.cloudinary.com/ac31624/image/upload/v1587100949/heart_pq9dhu.png',\n          club: 'https://res.cloudinary.com/ac31624/image/upload/v1587100949/club_muiew0.png',\n          diamond: 'https://res.cloudinary.com/ac31624/image/upload/v1587100949/diamond_nbbdru.png'\n      }\n    const { card } = this.props;\n    const {suit, value } = card;\n\n    const valueColor = suit === 'spade' || suit === 'club' ? 'black-text' : 'red-text'\n\n    return (\n        <div id='card'>\n            <span id='card-value'>\n                <span id={valueColor}>{value}</span>\n            </span>\n            <span id='suit-wrapper'><img id='card-suit' alt={suit} src={SUITICONS[suit]} /></span>\n        </div>\n    );\n  }\n}","import React from 'react';\nimport Card from './cards/card';\n\nexport default class PlayerHand extends React.Component {\n  constructor(props) {\n      super(props);\n\n      this.state = {\n\n      }\n  }\n\n  render() {\n    const { hand } = this.props;\n\n    return (\n        <div id=\"player-hand\">\n            <Card card={hand[0]} />\n            <Card card={hand[1]} />\n        </div>\n    );\n  }\n}","export const SUITS = [\n    'spade',\n    'heart',\n    'club',\n    'diamond'\n]\n\nexport const VALUES = [\n    'A',\n    '2',\n    '3',\n    '4',\n    '5',\n    '6',\n    '7',\n    '8',\n    '9',\n    '10',\n    'J',\n    'Q',\n    'K'\n]","import React from 'react';\nimport Card from './cards/card';\n\nexport default class DealerHand extends React.Component {\n  constructor(props) {\n      super(props);\n\n      this.state = {\n        showDealerHand: 0\n      }\n\n      this.showCards = this.showCards.bind(this);\n  }\n\n  componentWillReceiveProps(){\n      this.setState({\n        showDealerHand: 0\n      })\n  }\n\n  showCards() {\n      this.setState({\n        showDealerHand: this.state.showDealerHand + 1\n      })\n  }\n\n  render() {\n    const { showDealerHand } = this.state;\n    const { hand } = this.props;\n  \n    return (\n        <div id=\"dealer-hand-wrapper\">\n          <div id=\"dealer-hand-cards\">\n              {showDealerHand > 0 && <Card card={hand[0]} />}\n              {showDealerHand > 1 && <Card card={hand[1]} />}\n              {showDealerHand < 1 && <img id='dealer-placeholder' src=\"https://opengameart.org/sites/default/files/styles/medium/public/card%20back%20black.png\" alt='card' />}\n              {showDealerHand < 2 && <img id='dealer-placeholder'src=\"https://opengameart.org/sites/default/files/styles/medium/public/card%20back%20black.png\" alt='card' />}\n          </div>\n          <button id='dealer-show' onClick={this.showCards}>SHOW</button>\n        </div>\n    );\n  }\n}","import React from 'react';\nimport Card from './cards/card';\n\nexport default class Flop extends React.Component {\n  constructor(props) {\n      super(props);\n\n      this.state = {\n        showFlop: 0\n      }\n\n      this.showCards = this.showCards.bind(this);\n  }\n\n  componentWillReceiveProps(){\n      this.setState({\n        showFlop: 0\n      })\n  }\n\n  showCards() {\n    const newValue = this.state.showFlop === 3 ? 3 : this.state.showFlop + 1\n\n      this.setState({\n        showFlop: newValue\n      })\n  }\n\n  render() {\n    const { showFlop } = this.state;\n    const { hand } = this.props;\n\n    return (\n        <>\n            <span id=\"flop\">\n                {showFlop > 0 && <Card card={hand[0]} />}\n                {showFlop > 1 && <Card card={hand[1]} />}\n                {showFlop > 2 && <Card card={hand[2]} />}\n                {showFlop < 1 && <img id='dealer-placeholder' src=\"https://opengameart.org/sites/default/files/styles/medium/public/card%20back%20black.png\" alt='card' />}\n                {showFlop < 2 && <img id='dealer-placeholder'src=\"https://opengameart.org/sites/default/files/styles/medium/public/card%20back%20black.png\" alt='card' />}\n                {showFlop < 3 && <img id='dealer-placeholder'src=\"https://opengameart.org/sites/default/files/styles/medium/public/card%20back%20black.png\" alt='card' />}\n            </span>\n            {showFlop < 3 && <button id='flop-control' onClick={this.showCards}>FLOP</button>}\n        </>\n    );\n  }\n}","import React from 'react';\nimport Card from './cards/card';\n\nexport default class TurnAndRiver extends React.Component {\n  constructor(props) {\n      super(props);\n\n      this.state = {\n        showTurnAndRiver: 0\n      }\n\n      this.showCards = this.showCards.bind(this);\n  }\n\n  componentWillReceiveProps(){\n      this.setState({\n        showTurnAndRiver: 0\n      })\n  }\n\n  showCards() {\n      this.setState({\n        showTurnAndRiver: this.state.showTurnAndRiver === 3 ? 3 : this.state.showTurnAndRiver + 1\n      })\n  }\n\n  render() {\n    const { showTurnAndRiver } = this.state;\n    const { hand } = this.props;\n\n    return (\n        <>\n          <div id=\"turn-and-rover\">\n            {showTurnAndRiver > 0 && <Card card={hand[0]} />}\n            {showTurnAndRiver > 1 && <Card card={hand[1]} />}\n            {showTurnAndRiver < 1 && <img id='dealer-placeholder' src=\"https://opengameart.org/sites/default/files/styles/medium/public/card%20back%20black.png\" alt='card' />}\n            {showTurnAndRiver < 2 && <img id='dealer-placeholder'src=\"https://opengameart.org/sites/default/files/styles/medium/public/card%20back%20black.png\" alt='card' />}\n          </div>\n          { showTurnAndRiver < 2 && <button id='turn-control'  onClick={this.showCards}>{showTurnAndRiver === 1 ? 'RIVER' : 'TURN'}</button>}\n        </>\n    );\n  }\n}","import React from 'react';\nimport './App.css';\nimport PlayerHand from './playerhand'\nimport { buildDeck } from './cards/deck'\nimport DealerHand from './dealerhand';\nimport Flop from './flop';\nimport TurnAndRiver from './turnAndRiver';\nimport DeviceOrientation, { Orientation } from 'react-screen-orientation'\n\nexport default class App extends React.Component {\n  constructor(props) {\n      super(props);\n\n      this.state = {\n        deck: this.shuffleDeck(),\n        playerCount: 1,\n        gameStarted: false,\n        playerHands: [],\n        flop: [],\n        turnAndRiver: [],\n        dealerHand: [],\n      }\n\n      this.shuffleDeck = this.shuffleDeck.bind(this);\n      this.newGame = this.newGame.bind(this);\n      this.addPlayerCount = this.addPlayerCount.bind(this);\n      this.minusPlayerCount = this.minusPlayerCount.bind(this);\n      this.dealCards = this.dealCards.bind(this);\n      this.reset = this.reset.bind(this);\n  }\n\n  shuffleDeck() {\n    const shuffledDeck = buildDeck();\n\n    return shuffledDeck;\n  }\n\n  newGame() {\n    this.dealCards();\n  }\n\n  addPlayerCount() {\n    const playerCount = this.state.playerCount === 6? 6 : this.state.playerCount + 1\n\n    this.setState({\n      playerCount: playerCount\n    })\n  }\n\n  minusPlayerCount() {\n    const playerCount = this.state.playerCount === 1 ? 1 : this.state.playerCount - 1\n\n    this.setState({\n      playerCount: playerCount\n    })\n  }\n\n  dealCards() {\n    const newDeck = this.shuffleDeck();\n    const { playerCount } = this.state;\n    const hands = [];\n\n    for (var i = 0; i < playerCount; i++) {\n      const cards = [newDeck.shift(), newDeck.shift()]\n\n      hands.push(cards);\n    }\n\n    const dealerHand = [newDeck.shift(), newDeck.shift()]\n    const flop = [newDeck.shift(), newDeck.shift(), newDeck.shift()]\n    const turnAndRiver = [newDeck.shift(), newDeck.shift()]\n\n    this.setState({\n      playerHands: hands,\n      deck: newDeck,\n      dealerHand,\n      flop,\n      turnAndRiver,\n    })\n  }\n\n  reset() {\n    this.setState({\n      deck: [],\n      playerHands: [],\n      flop: [],\n      turnAndRiver: [],\n      dealerHand: []\n    })\n  }\n\n  render() {\n    const { gameStarted, playerCount } = this.state;\n\n    const renderPlayerHands = () => {\n      const { playerHands } = this.state;\n\n      return playerHands.map((hand, index) => {\n        return (<PlayerHand index={index} hand={hand} />)\n      })\n    }\n\n    const renderDealerHand = () => {\n      const { dealerHand } = this.state;\n\n      if (dealerHand.length < 1) {\n        return null;\n      }\n\n      return <DealerHand hand={dealerHand} />\n    }\n\n    const renderFlop = () => {\n      const { flop } = this.state;\n\n      if (flop.length < 1) {\n        return null;\n      }\n      \n      return <Flop hand={flop} />\n    }\n\n    const renderTurnAndRiver = () => {\n      const { turnAndRiver } = this.state;\n\n      if (turnAndRiver.length < 1) {\n        return null;\n      }\n\n      return <TurnAndRiver hand={turnAndRiver} />\n    };\n\n    return (\n      <div className=\"App\">\n        <DeviceOrientation lockOrientation={'landscape'}>\n          <Orientation orientation='landscape' alwaysRender={false}>\n            <div id='player-hands-row'>{renderPlayerHands()}</div>\n            {!gameStarted && (<div id=\"game-controls\">\n              <div id='players-label'>Players:</div>\n              <div>\n                <button id='player-count-button' onClick={this.minusPlayerCount}>-</button>\n                <span id='player-count'> {playerCount} </span>\n                <button id='player-count-button' onClick={this.addPlayerCount}>+</button>\n              </div>\n            </div>)}\n            <div id=\"table-cards\">\n              {renderFlop()}\n              {renderTurnAndRiver()}\n            </div>\n            <div id=\"dealer-hand\">{renderDealerHand()}</div>\n            <div id='clear-and-deal'>\n              <button id='controls-action-button' onClick={this.reset}>CLEAR</button>\n              <button id='controls-action-button' onClick={this.newGame}>DEAL</button>\n            </div>\n          </Orientation>\n          <Orientation orientation='portrait' alwaysRender={false}>\n           <span id='portrait-message'>Rotate your phone to start losing money, deala</span>\n          </Orientation>\n        </DeviceOrientation>\n      </div>\n    );\n  }\n}","import { SUITS, VALUES } from '/Users/allchen/uth/src/cards/constants.js';\nimport shuffle from 'shuffle-array';\n\n  export const buildDeck = () => {\n    const deck = [];\n\n    SUITS.forEach(suit => {\n        VALUES.forEach(value => {\n            const card = {\n                suit: suit,\n                value: value\n            }\n\n            deck.push(card);\n        })\n    })\n\n    return shuffle(deck);\n  }","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}